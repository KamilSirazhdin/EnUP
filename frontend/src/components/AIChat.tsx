import { useState } from 'react'
import { motion } from 'framer-motion'
import { Send, Bot, User, Lightbulb, MessageCircle, BookOpen } from 'lucide-react'
import { Topic } from '../data/courseData'

interface Message {
  id: string
  text: string
  isUser: boolean
  timestamp: Date
}

interface AIChatProps {
  topic: Topic
}

const AIChat = ({ topic }: AIChatProps) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: `–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ–º–µ "${topic.title}". –ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª, –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ –ø–æ–º–æ—á—å —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏. –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
      isUser: false,
      timestamp: new Date()
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)

  const quickQuestions = [
    '–û–±—ä—è—Å–Ω–∏ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
    '–ü—Ä–∏–≤–µ–¥–∏ –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤',
    '–ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∂–∏–∑–Ω–∏?',
    '–ü–æ–º–æ–≥–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º',
    '–ö–∞–∫–∏–µ –µ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è?'
  ]

  const generateAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase()
    
    // –ò–º–∏—Ç–∞—Ü–∏—è AI –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–º—ã
    if (lowerMessage.includes('–æ–±—ä—è—Å–Ω–∏') || lowerMessage.includes('–ø—Ä–∞–≤–∏–ª–æ')) {
      return `–ö–æ–Ω–µ—á–Ω–æ! ${topic.explanation} 

–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:
‚Ä¢ ${topic.associations[0]}
‚Ä¢ ${topic.associations[1]}

–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –∫–∞–∫ ${topic.associations[2]?.toLowerCase() || '–∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é'}.`
    }
    
    if (lowerMessage.includes('–ø—Ä–∏–º–µ—Ä') || lowerMessage.includes('–±–æ–ª—å—à–µ')) {
      return `–í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

${topic.examples.map((example, index) => `${index + 1}. ${example}`).join('\n')}

–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å:
‚Ä¢ "I always study English" (—è –≤—Å–µ–≥–¥–∞ –∏–∑—É—á–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
‚Ä¢ "She usually works late" (–æ–Ω–∞ –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ø–æ–∑–¥–Ω–∞)
‚Ä¢ "They often travel abroad" (–æ–Ω–∏ —á–∞—Å—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É)`
    }
    
    if (lowerMessage.includes('–∂–∏–∑–Ω—å') || lowerMessage.includes('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å')) {
      return `–í —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ! –ù–∞–ø—Ä–∏–º–µ—Ä:

üè¢ –ù–∞ —Ä–∞–±–æ—Ç–µ: "I work from 9 to 5"
üè† –î–æ–º–∞: "I usually cook dinner"
üè™ –í –º–∞–≥–∞–∑–∏–Ω–µ: "I often buy groceries here"
‚úàÔ∏è –í –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö: "I always take my passport"

–ü–æ–ø—Ä–æ–±—É–π —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ!`
    }
    
    if (lowerMessage.includes('—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ') || lowerMessage.includes('–ø–æ–º–æ–≥–∏')) {
      return `–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:

1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π –≤–æ–ø—Ä–æ—Å
2. –í—Å–ø–æ–º–Ω–∏ –ø—Ä–∞–≤–∏–ª–æ: ${topic.explanation.split('.')[0]}
3. –ò—Å–ø–æ–ª—å–∑—É–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${topic.associations[0]}
4. –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç

–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–æ–π –∑–≤—É—á–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ.`
    }
    
    if (lowerMessage.includes('–∏—Å–∫–ª—é—á–µ–Ω–∏–µ') || lowerMessage.includes('–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å')) {
      return `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í —ç—Ç–æ–π —Ç–µ–º–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤:

‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–ª–∞–≥–æ–ª—ã –∏–º–µ—é—Ç –æ—Å–æ–±—ã–µ —Ñ–æ—Ä–º—ã
‚Ä¢ –í –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –º–µ–Ω—è–µ—Ç—Å—è
‚Ä¢ –í –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è—Ö –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è "not"

üí° –ó–∞–ø–æ–º–Ω–∏: ${topic.associations[1]}

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫!`
    }
    
    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
    return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–º—ã "${topic.title}" —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ ${topic.explanation.split('.')[0]}. 

–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –∏–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!`
  }

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      isUser: true,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputValue('')
    setIsTyping(true)

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ AI
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: generateAIResponse(inputValue),
        isUser: false,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, aiResponse])
      setIsTyping(false)
    }, 1000 + Math.random() * 2000)
  }

  const handleQuickQuestion = (question: string) => {
    setInputValue(question)
  }

  return (
    <motion.div
      className="card h-[600px] flex flex-col"
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.3 }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center space-x-3 mb-4 pb-4 border-b border-gray-200">
        <div className="w-10 h-10 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-full flex items-center justify-center">
          <Bot className="w-5 h-5 text-white" />
        </div>
        <div>
          <h3 className="font-semibold text-gray-900">AI –ü–æ–º–æ—â–Ω–∏–∫</h3>
          <p className="text-sm text-gray-500">–¢–µ–º–∞: {topic.title}</p>
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      <div className="flex-1 overflow-y-auto space-y-4 mb-4">
        {messages.map((message) => (
          <motion.div
            key={message.id}
            className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <div
              className={`max-w-[80%] p-3 rounded-lg ${
                message.isUser
                  ? 'bg-primary-600 text-white'
                  : 'bg-gray-100 text-gray-900'
              }`}
            >
              <div className="flex items-start space-x-2">
                {!message.isUser && (
                  <Bot className="w-4 h-4 text-primary-600 mt-0.5 flex-shrink-0" />
                )}
                <div className="flex-1">
                  <p className="text-sm whitespace-pre-wrap">{message.text}</p>
                  <p className={`text-xs mt-1 ${
                    message.isUser ? 'text-primary-100' : 'text-gray-500'
                  }`}>
                    {message.timestamp.toLocaleTimeString()}
                  </p>
                </div>
                {message.isUser && (
                  <User className="w-4 h-4 text-primary-100 mt-0.5 flex-shrink-0" />
                )}
              </div>
            </div>
          </motion.div>
        ))}
        
        {isTyping && (
          <motion.div
            className="flex justify-start"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            <div className="bg-gray-100 p-3 rounded-lg">
              <div className="flex items-center space-x-2">
                <Bot className="w-4 h-4 text-primary-600" />
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã */}
      <div className="mb-4">
        <p className="text-sm text-gray-600 mb-2">–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
        <div className="flex flex-wrap gap-2">
          {quickQuestions.map((question, index) => (
            <button
              key={index}
              onClick={() => handleQuickQuestion(question)}
              className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 px-2 py-1 rounded-full transition-colors duration-200"
            >
              {question}
            </button>
          ))}
        </div>
      </div>

      {/* –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      <div className="flex space-x-2">
        <input
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
          placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
          className="flex-1 input-field"
        />
        <button
          onClick={handleSendMessage}
          disabled={!inputValue.trim() || isTyping}
          className="btn-primary px-4 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <Send className="w-4 h-4" />
        </button>
      </div>
    </motion.div>
  )
}

export default AIChat
